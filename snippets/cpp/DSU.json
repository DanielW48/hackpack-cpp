{
    "DSU.h": {
        "body": [
            "struct DSU {",
            "\tvector<int> s;",
            "\tDSU(int n) : s(n, -1) {}",
            "\tint find(int i) { return s[i] < 0 ? i : s[i] = find(s[i]); }",
            "\tbool join(int a, int b) {",
            "\t\ta = find(a), b = find(b);",
            "\t\tif (a == b) return false;",
            "\t\tif (s[a] > s[b]) swap(a, b);",
            "\t\ts[a] += s[b], s[b] = a;",
            "\t\treturn true;",
            "\t}",
            "\tint size(int i) { return -s[find(i)]; }",
            "\tbool same(int a, int b) { return find(a) == find(b); }",
            "};"
        ],
        "description": "Maintains union of disjoint sets.",
        "prefix": [
            "hack_DSU"
        ]
    }
}