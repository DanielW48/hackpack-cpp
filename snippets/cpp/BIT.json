{
    "BIT.h": {
        "body": [
            "template <typename T>",
            "struct BIT {",
            "\tvector<T> s;",
            "\tint n;",
            "\tBIT(int n): s(n + 1), n(n) {}",
            "\tvoid update(int i, T v) {",
            "\t\tfor (i++; i <= n; i += i & -i) s[i] += v;",
            "\t}",
            "\tT query(int i) {",
            "\t\tT ans = 0;",
            "\t\tfor (i++; i; i -= i & -i) ans += s[i];",
            "\t\treturn ans;",
            "\t}",
            "\tT query(int l, int r) { return query(r) - query(l - 1); }",
            "\tint kth(T k) { // returns n if k > sum of tree",
            "\t\tif (k <= 0) return -1;",
            "\t\tint i = 0;",
            "\t\tfor (int pw = 1 << __lg(n); pw; pw >>= 1)",
            "\t\t\tif (i + pw <= n && s[i + pw] < k) k -= s[i += pw];",
            "\t\treturn i;",
            "\t}",
            "};"
        ],
        "description": "Query [l, r] sums, and point updates.\nkth() returns the smallest index i s.t. query(0, i) >= k",
        "prefix": [
            "hack_BIT"
        ]
    }
}